---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    ssh_port: 22
    ssh_user: root
    ssh_id_path: "~/.ssh/id_ed25519"
  tasks:
    - name: Check if SSH key already exists
      ansible.builtin.stat:
        path: "{{ ssh_id_path }}"
      register: id_ed25519_stat

    - name: Check if SSH public key already exists
      ansible.builtin.stat:
        path: "{{ ssh_id_path }}.pub"
      register: id_ed25519_pub_stat

    - name: Use existing SSH key
      when: id_ed25519_stat.stat.exists
      block:
        - name: Create public SSH key
          ansible.builtin.shell: |
            ssh-keygen -y -f {{ ssh_id_path }} > {{ ssh_id_path }}.pub
          changed_when: false
          when: not id_ed25519_pub_stat.stat.exists

        - name: Register the SSH key facts
          ansible.builtin.set_fact:
            existing_ssh_key_name: "molecule"
            generated_public_ssh_key: "{{ lookup('ansible.builtin.file', ssh_id_path + '.pub') }}"

        - name: Register SSH key for test instance(s)
          hetzner.hcloud.ssh_key:
            name: "{{ existing_ssh_key_name }}"
            public_key: "{{ generated_public_ssh_key }}"
            api_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
            state: present
          ignore_errors: true

    - name: Create new SSH key
      when: not id_ed25519_stat.stat.exists
      block:
        - name: Create SSH key
          community.crypto.openssh_keypair:
            path: "{{ ssh_id_path }}"
            force: true
            type: ed25519
          register: generated_ssh_key

        - name: Register the SSH key name
          ansible.builtin.set_fact:
            ssh_key_name: "molecule-generated-{{ 12345 | random | to_uuid }}"

        - name: Register SSH key for test instance(s)
          hetzner.hcloud.ssh_key:
            name: "{{ ssh_key_name }}"
            public_key: "{{ generated_ssh_key.public_key }}"
            api_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
            state: present

    - name: Set hetzner facts
      ansible.builtin.set_fact:
        hetzner_server_state: rebuild
        final_ssh_key_name: "{% if id_ed25519_stat.stat.exists %}{{ existing_ssh_key_name }}{% else %}{{ ssh_key_name }}{% endif %}"
        final_ssh_key_path: "{% if id_ed25519_stat.stat.exists %}~/.ssh/id_ed25519{% else %}{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key{% endif %}"

    - name: Print debug output
      ansible.builtin.debug:
        msg:
          - "{{ hetzner_server_state }}"
          - "{{ final_ssh_key_name }}"

    - name: Create molecule instance(s)
      hetzner.hcloud.server:
        name: "{{ item.name }}"
        server_type: "{{ item.server_type }}"
        ssh_keys:
          - "{{ final_ssh_key_name }}"
          - "michael@eifel"
        image: "{{ item.image }}"
        location: "{{ item.location | default(omit) }}"
        datacenter: "{{ item.datacenter | default(omit) }}"
        user_data: |
          #cloud-config
          package_update: false
          package_upgrade: false
          apt:
            conf: |
              APT::Periodic::Update-Package-Lists "0";
              APT::Periodic::Download-Upgradeable-Packages "0";
              APT::Periodic::AutocleanInterval "0";
              APT::Periodic::Unattended-Upgrade "0";
          runcmd:
            - systemctl stop unattended-upgrades
            - systemctl disable unattended-upgrades
            - systemctl stop apt-daily.service
            - systemctl disable apt-daily.service
            - systemctl stop apt-daily.timer
            - systemctl disable apt-daily.timer
            - systemctl stop apt-daily-upgrade.service
            - systemctl disable apt-daily-upgrade.service
            - systemctl stop apt-daily-upgrade.timer
            - systemctl disable apt-daily-upgrade.timer
        api_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
        state: "{{ hetzner_server_state }}"
      register: server
      with_items: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: hetzner_jobs
      until: hetzner_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"

    - name: Create volume(s)
      hetzner.hcloud.volume:
        name: "{{ item.1.name | default(item.0.name) }}"
        server: "{{ item.0.name }}"
        location: "{{ item.1.location | default(omit) }}"
        size: "{{ item.1.size | default(10) }}"
        api_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
        state: "present"
      loop: "{{ molecule_yml.platforms | subelements('volumes', skip_missing=True) }}"
      register: volumes
      async: 7200
      poll: 0

    - name: Wait for volume(s) creation to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: hetzner_volumes
      until: hetzner_volumes.finished
      retries: 300
      when:
        - volumes is defined
        - volumes.changed
      with_items: "{{ volumes.results }}"

    - name: Create private network(s)
      hetzner.hcloud.network:
        name: "{{ item.network[0].name }}"
        ip_range: "{{ item.network[0].ip_range | default(omit) }}"
        api_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
        state: "present"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        extended: yes
      when: ansible_loop.first
      register: networks
      async: 7200
      poll: 0

    - name: Wait for network(s) creation to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: hetzner_networks
      until: hetzner_networks.finished
      retries: 300
      when:
        - networks is defined
        - networks.changed
        - ansible_loop.first
      loop: "{{ networks.results }}"
      loop_control:
        extended: yes

    - name: Create private subnetwork(s)
      hetzner.hcloud.subnetwork:
        network: "{{ item.network[0].name }}"
        ip_range: "{{ item.network[0].subnet[0].ip | ansible.utils.ipaddr('network/prefix') }}"
        network_zone: "{{ item.network[0].subnet[0].network_zone | default('eu-central') }}"
        type: "{{ item.network[0].subnet[0].type | default('cloud') }}"
        api_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
        state: "present"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        extended: yes
      when: ansible_loop.first
      register: subnetworks

    - name: Attach Server to Subnetwork(s)
      hetzner.hcloud.server_network:
        network: "{{ item.network[0].name }}"
        server: "{{ item.name }}"
        ip: "{{ item.network[0].subnet[0].ip | ansible.utils.ipaddr('address') }}"
        api_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
        state: "present"
      loop: "{{ molecule_yml.platforms }}"
      retries: 12
      delay: 10
      register: hcloud_server_network_result
      until: hcloud_server_network_result is not failed

    - name: Populate instance config dict
      when: server.changed | bool
      ansible.builtin.set_fact:
        instance_conf_dict:
          {
            "instance": "{{ item.hcloud_server.name }}",
            "ssh_key_name": "{{ final_ssh_key_name }}",
            "address": "{{ item.hcloud_server.ipv4_address }}",
            "user": "{{ ssh_user }}",
            "port": "{{ ssh_port }}",
            "identity_file": "{{ final_ssh_key_path }}",
            "volumes": "{{ item.item.item.volumes | default({}) }}",
            "networks": "{{ item.item.item.networks | default({}) | dict2items(key_name='name', value_name='data') }}",
          }
      with_items: "{{ hetzner_jobs.results }}"
      register: instance_config_dict

    - name: Convert instance config dict to a list
      when: server.changed | bool
      ansible.builtin.set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump instance config
      when: server.changed | bool
      ansible.builtin.copy:
        content: |
          # Molecule managed

          {{ instance_conf | to_json | from_json | to_yaml }}
        dest: "{{ molecule_instance_config }}"

    - name: Dump instance config
      ansible.builtin.debug:
        msg: "content of instance config: {{ lookup('file', molecule_instance_config) | from_yaml }}"

    - name: Start SSH pollers
      ansible.builtin.wait_for:
        host: "{{ item.address }}"
        port: "{{ item.port }}"
        search_regex: SSH
        delay: 10
        timeout: 320
      loop: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
      loop_control:
        label: "{{ item.instance }}"
      register: ssh_wait_async
      async: 300
      poll: 0

    - name: Wait for SSH
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ ssh_wait_async.results }}"
      loop_control:
        index_var: index
      register: ssh_wait
      until: ssh_wait.finished
      retries: 300
      delay: 1
