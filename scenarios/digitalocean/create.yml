---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    ssh_user: root
    ssh_port: 22
  tasks:
    - name: Assert that mandatory variables are defined
      ansible.builtin.assert:
        that:
          - item.name is defined
          - item.region is defined
          - item.size is defined
        fail_msg: |
          Ensure that you define instance name, region and size for each
          instance in platforms in molecule.yml.
          Example:

          ---
          dependency:
            name: galaxy
          driver:
            name: digitalocean
          platforms:
            - name: instance
              region: fra1
              size: 2gb
              image: ubuntu-20-04-x64
          provisioner:
            name: ansible
          verifier:
            name: ansible
      loop: "{{ molecule_yml.platforms }}"

    - name: Check if SSH key already exists
      ansible.builtin.stat:
        path: ~/.ssh/id_rsa
      register: id_rsa_stat

    - name: Use existing SSH key
      block:
        - name: Create public SSH key
          ansible.builtin.shell: |
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          changed_when: false

        - name: Register the SSH key facts
          ansible.builtin.set_fact:
            existing_ssh_key_name: "molecule"
            generated_public_ssh_key: "{{ lookup('ansible.builtin.file', '~/.ssh/id_rsa.pub') }}"

        - name: Register SSH key for test instance(s)
          community.digitalocean.digital_ocean_sshkey:
            name: "{{ existing_ssh_key_name }}"
            ssh_pub_key: "{{ generated_public_ssh_key }}"
            state: present
          ignore_errors: true
      when: id_rsa_stat.stat.exists

    - name: Create new SSH key
      block:
        - name: Create SSH key
          community.crypto.openssh_keypair:
            path: "{{ ssh_path }}"
            force: true
            type: ed25519
          register: generated_ssh_key

        - name: Register the SSH key name
          ansible.builtin.set_fact:
            ssh_key_name: "molecule-generated-{{ 12345 | random | to_uuid }}"

        - name: Register SSH key for test instance(s)
          community.digitalocean.digital_ocean_sshkey:
            name: "{{ ssh_key_name }}"
            ssh_pub_key: "{{ generated_ssh_key.public_key }}"
            state: present
      when: not id_rsa_stat.stat.exists

    - name: Set do facts
      ansible.builtin.set_fact:
        digitalocean_server_state: "{{ lookup('ansible.builtin.env', 'DIGITALOCEAN_SERVER_STATE') or 'active' }}"
        final_ssh_key_name: "{% if id_rsa_stat.stat.exists %}{{ existing_ssh_key_name }}{% else %}{{ ssh_key_name }}{% endif %}"
        final_ssh_key_path: "{% if id_rsa_stat.stat.exists %}~/.ssh/id_rsa{% else %}{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key{% endif %}"

    - name: Create private network(s)
      community.digitalocean.digital_ocean_vpc:
        name: molecule
        ip_range: "{{ item.vpc_cidr }}"
        region: "{{ item.region }}"
        state: present
      with_items: "{{ molecule_yml.platforms }}"
      register: networks

    - ansible.builtin.debug: var=networks

    - name: Pause for 1 minute before fetching VPC information
      ansible.builtin.pause:
        minutes: 1

    - name: Set target VPC id
      ansible.builtin.set_fact:
        do_target_vpc_id: "{{ networks.results[0].data.vpc.id }}"

    - ansible.builtin.debug: var=do_target_vpc_id

    - name: Create molecule instance(s)
      community.digitalocean.digital_ocean_droplet:
        name: "{{ item.name }}"
        unique_name: true
        region: "{{ item.region }}"
        image: "{{ item.image }}"
        ipv6: "{{ item.ipv6 }}"
        size: "{{ item.size }}"
        ssh_keys:
          - "e7:44:cb:7d:e7:41:83:da:df:5e:72:47:96:cf:14:83" # molecule
          - "3a:a9:0e:3f:3c:c4:8b:81:c8:9e:2d:b7:7a:86:51:1e" # michael@eifel
        private_networking: true
        vpc_uuid: "{{ networks.results[0].data.vpc.id }}"
        wait_timeout: 300
      register: server
      with_items: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: digitalocean_jobs
      until: digitalocean_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"

    - ansible.builtin.debug: var=server

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config dict
      ansible.builtin.set_fact:
        instance_conf_dict:
          instance: "{{ item.data.droplet.name }}"
          address: "{{ (item.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address | default('<none>', true) }}"
          user: "{{ ssh_user }}"
          port: "{{ ssh_port }}"
          identity_file: "{{ final_ssh_key_path }}"
          droplet_id: "{{ item.data.droplet.id }}"
          remote_keypair_id: "{{ final_ssh_key_name }}"
      with_items: "{{ digitalocean_jobs.results }}"
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list
      ansible.builtin.set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      ansible.builtin.copy:
        content: "{{ instance_conf | to_json | from_json }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      ansible.builtin.wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10
        timeout: 320
      with_items: "{{ lookup('file', molecule_instance_config) }}"
