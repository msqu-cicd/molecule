---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    ssh_port: 22
    ssh_user: root
    ssh_id_path: "~/.ssh/id_ed25519"
  tasks:
    - name: Gather Vultr plans information
      vultr.cloud.plan_info:
        api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
      register: vultr_plan_info

    - name: Print the gathered information
      ansible.builtin.debug:
        var: vultr_plan_info.vultr_plan_info
      no_log: "{{ ansible_verbosity < 2 }}"

    - name: Gather Vultr regions information
      vultr.cloud.region_info:
        api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
      register: vultr_region_info

    - name: Print the gathered information
      ansible.builtin.debug:
        var: vultr_region_info.vultr_region_info
      no_log: "{{ ansible_verbosity < 2 }}"

    - name: Check if SSH key already exists
      ansible.builtin.stat:
        path: "{{ ssh_id_path }}"
      register: id_ed25519_stat

    - name: Check if SSH public key already exists
      ansible.builtin.stat:
        path: "{{ ssh_id_path }}.pub"
      register: id_ed25519_pub_stat

    - name: Use existing SSH key
      block:
        - name: Create public SSH key
          ansible.builtin.shell: |
            ssh-keygen -y -f {{ ssh_id_path }} > {{ ssh_id_path }}.pub
          changed_when: false
          when: not id_ed25519_pub_stat.stat.exists

        - name: Register the SSH key facts
          ansible.builtin.set_fact:
            existing_ssh_key_name: "molecule"
            generated_public_ssh_key: "{{ lookup('ansible.builtin.file', ssh_id_path + '.pub') }}"

        - name: Register SSH key for test instance(s)
          vultr.cloud.ssh_key:
            name: "{{ existing_ssh_key_name }}"
            ssh_key: "{{ generated_public_ssh_key }}"
            api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
            state: present
          ignore_errors: true
      when: id_ed25519_stat.stat.exists

    - name: Create new SSH key
      block:
        - name: Create SSH key
          community.crypto.openssh_keypair:
            path: "{{ ssh_id_path }}"
            force: true
            type: ed25519
          register: generated_ssh_key

        - name: Register the SSH key name
          ansible.builtin.set_fact:
            ssh_key_name: "molecule-generated-{{ 12345 | random | to_uuid }}"

        - name: Register SSH key for test instance(s)
          vultr.cloud.ssh_key:
            name: "{{ ssh_key_name }}"
            ssh_key: "{{ generated_ssh_key.public_key }}"
            api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
            state: present
      when: not id_ed25519_stat.stat.exists

    - name: Set vultr facts
      ansible.builtin.set_fact:
        vultr_server_state: "{{ lookup('ansible.builtin.env', 'VULTR_SERVER_STATE') or 'present' }}"
        final_ssh_key_name: "{% if id_ed25519_stat.stat.exists %}{{ existing_ssh_key_name }}{% else %}{{ ssh_key_name }}{% endif %}"
        final_ssh_key_path: "{% if id_ed25519_stat.stat.exists %}~/.ssh/id_ed25519{% else %}{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key{% endif %}"

    - name: Create private network(s)
      vultr.cloud.vpc:
        name: molecule
        v4_subnet: "{{ item.vpc_cidr | ansible.utils.ipaddr('network') }}"
        v4_subnet_mask: "{{ item.vpc_cidr | ansible.utils.ipaddr('prefix') }}"
        region: "{{ item.region }}"
        api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
        state: present
      with_items: "{{ molecule_yml.platforms }}"
      register: networks

    - name: Create molecule instance(s)
      vultr.cloud.instance:
        label: "{{ item.name }}"
        hostname: "{{ item.name }}"
        user_data: |
          #cloud-config
          package_update: false
          package_upgrade: false
          users:
            - name: root
              lock_passwd: false
              hashed_passwd: '$6$oJUDvM930K9.f5ov$CpD4WF/UgV9h8lcTpb8wYqAdasT/iT4oWsZGwvmbrbbeah7jlC8U/gQt53q02OVJAjJ4xxLtq8cAKYK/iy8LK0'
          ssh_pwauth: true
          disable_root: false
        os: "{{ item.os }}"
        enable_ipv6: yes
        plan: "{{ item.plan }}"
        backups: false
        ddos_protection: false
        vpcs:
          - molecule
        region: "{{ item.region }}"
        api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
        ssh_keys:
          - "michael@eifel"
          - "{{ final_ssh_key_name }}"
        state: "{{ vultr_server_state }}"
      register: server
      with_items: "{{ molecule_yml.platforms }}"

    - name: Populate instance config dict
      ansible.builtin.set_fact:
        instance_conf_dict:
          {
            "instance": "{{ item.vultr_instance.label }}",
            "ssh_key_name": "{{ final_ssh_key_name }}",
            "address": "{{ item.vultr_instance.main_ip }}",
            "region": "{{ item.vultr_instance.region }}",
            "user": "{{ ssh_user }}",
            "port": "{{ ssh_port }}",
            "identity_file": "{{ final_ssh_key_path }}",
            "networks": "{{ item.item.item.networks | default({}) | dict2items(key_name='name', value_name='data') }}",
          }
      with_items: "{{ server.results }}"
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list
      ansible.builtin.set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      ansible.builtin.copy:
        content: |
          # Molecule managed

          {{ instance_conf | to_json | from_json | to_yaml }}
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      ansible.builtin.wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10
      with_items: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
