---
- name: Destroy
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    ssh_id_path: "~/.ssh/id_ed25519"
  tasks:
    - name: Check if SSH key already exists
      ansible.builtin.stat:
        path: "{{ ssh_id_path }}"
      register: id_ed25519_stat

    - name: Set hetzner facts
      ansible.builtin.set_fact:
        vultr_server_state: "{{ lookup('ansible.builtin.env', 'VULTR_SERVER_STATE') or 'absent' }}"

    - name: Populate the instance config
      ansible.builtin.set_fact:
        instance_conf: "{{ lookup('file', molecule_instance_config, errors='warn') | from_yaml }}"
        skip_instances: false
      register: instance_config_lookup

    - name: Populate instance config when file missing
      ansible.builtin.set_fact:
        instance_conf: {}
        skip_instances: true
      when: not instance_config_lookup.ansible_facts.instance_conf

    - name: Gather Vultr servers information
      vultr.cloud.instance_info:
        region: "{{ item.region }}"
      with_items: "{{ molecule_yml.platforms }}"
      register: vultr_server_info_output
      when:
        - not instance_config_lookup.ansible_facts.instance_conf

    - name: Destroy Vultr Server
      block:
        - name: Destroy molecule instance(s)
          vultr.cloud.instance:
            label: "{{ item.name }}"
            region: "{{ item.region }}"
            api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
            state: absent
          register: server
          with_items: "{{ molecule_yml.platforms }}"

        - name: Delete private network(s)
          vultr.cloud.vpc:
            name: molecule
            region: "{{ item.region }}"
            api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
            state: absent
          with_items: "{{ molecule_yml.platforms }}"
          register: networks
          until: "networks is not failed"
          retries: 3
          delay: 30
      when: vultr_server_state == 'absent'

    - name: Stop Vultr Server
      block:
        - name: "Trigger molecule instance(s) desired state {{ vultr_server_state }}"
          vultr.cloud.instance:
            label: "{{ item.name }}"
            region: "{{ item.region }}"
            api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
            state: "{{ vultr_server_state }}"
          register: server
          with_items: "{{ molecule_yml.platforms }}"
      when:
        - vultr_server_state != 'absent'
        - vultr_server_info_output is defined
        - vultr_server_info_output.vultr_server_info is defined
        - vultr_server_info_output.vultr_server_info[0].id is defined

    - name: Remove registered SSH key
      vultr.cloud.ssh_key:
        name: "{{ instance_conf[0].ssh_key_name }}"
        api_key: "{{ lookup('env', 'VULTR_API_KEY') }}"
        state: absent
      when:
        - not id_ed25519_stat.stat.exists
        - not skip_instances
        - instance_conf | length  # must contain at least one instance

    - name: Populate instance config
      ansible.builtin.set_fact:
        instance_conf: {}

    - name: Dump instance config
      ansible.builtin.copy:
        content: |
          # Molecule managed

          {{ instance_conf | to_json | from_json | to_yaml }}
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool
